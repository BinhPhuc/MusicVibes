{
  "version": 3,
  "sources": ["../../../../../node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],
  "sourcesContent": ["import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AACA,mBAAsB;AAKtB,IAAM,YAAQ,aAAAA,SAAU,2BAA2B;AAI5C,IAAM,oBAAN,cAAgC,YAAY;AAAA,EAC/C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,YAAY,IAAI,YAAY;AAAA,EACrC;AAAA,EACA,OAAa,sBAAsB,WAAW;AAAA;AAC1C,cAAQ,MAAM,UAAU,UAAU,WAAW,GAAG,mBAAmB;AAAA,IACvE;AAAA;AAAA,EACM,QAAQ;AAAA;AACV,UAAI;AACA,cAAM,KAAK,WAAW;AAAA,MAC1B,SACO,KAAK;AACR,YAAI,eAAe,kBAAkB;AACjC,gBAAM,eAAe;AAAA,QACzB,OACK;AACD,gBAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EACA,WAAW;AACP;AAAA,EACJ;AAAA,EACM,aAAa;AAAA;AACf,YAAM,KAAK,oBAAoB;AAC/B,YAAM,kDAAkD,KAAK,UAAU,QAAQ;AAC/E,YAAM,KAAK,eAAe;AAC1B,UAAI,KAAK,QAAQ,mBAAmB,KAAK,SAAS,OAAO,GAAG;AACxD,aAAK,SAAS;AAAA,MAClB,OACK;AACD,cAAM,cAAc,IAAI,YAAY,KAAK,UAAU,KAAK,WAAW,KAAK,OAAO;AAC/E,cAAM,YAAY,MAAM;AACxB,aAAK,SAAS;AAAA,MAClB;AAAA,IACJ;AAAA;AAAA,EACM,sBAAsB;AAAA;AACxB,YAAM,YAAY,MAAM,KAAK,UAAU,UAAU,WAAW;AAC5D,UAAI,UAAU,mBAAmB,OAAO;AACpC,cAAM,8BAA8B,KAAK,UAAU,QAAQ;AAC3D,cAAM,KAAK,UAAU,MAAM,KAAK,UAAU,KAAK,WAAW,KAAK,OAAO;AACtE,eAAO,KAAK,oBAAoB;AAAA,MACpC;AAAA,IACJ;AAAA;AACJ;",
  "names": ["initDebug"]
}
