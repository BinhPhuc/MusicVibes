import{a as g}from"./chunk-6JDSCIYQ.js";import"./chunk-NESCWZJB.js";import"./chunk-P4BZCRG7.js";import{a as o}from"./chunk-OEW7T7QN.js";import{a as T,c as f}from"./chunk-K776FSIA.js";import"./chunk-VYVOHQNH.js";import"./chunk-7GI4CMUR.js";import{A as h,C as U,H as F,I as C,e as y,f as p,h as w,j as m,n as l,z as I}from"./chunk-DNMECVE7.js";var E=y(U(),1);var S={NONE:"not compressed	PCM	Apple Computer",sowt:"PCM (byte swapped)",fl32:"32-bit floating point IEEE 32-bit float",fl64:"64-bit floating point IEEE 64-bit float	Apple Computer",alaw:"ALaw 2:1	8-bit ITU-T G.711 A-law",ulaw:"\xB5Law 2:1	8-bit ITU-T G.711 \xB5-law	Apple Computer",ULAW:"CCITT G.711 u-law 8-bit ITU-T G.711 \xB5-law",ALAW:"CCITT G.711 A-law 8-bit ITU-T G.711 A-law",FL32:"Float 32	IEEE 32-bit float "},i=class extends F("AIFF"){},k=class{constructor(e,t){this.isAifc=t;let s=t?22:18;if(e.chunkSize<s)throw new i(`COMMON CHUNK size should always be at least ${s}`);this.len=e.chunkSize}get(e,t){let s=m.get(e,t+8)-16398,a=m.get(e,t+8+2),n={numChannels:m.get(e,t),numSampleFrames:l.get(e,t+2),sampleSize:m.get(e,t+6),sampleRate:s<0?a>>Math.abs(s):a<<s};if(this.isAifc){if(n.compressionType=o.get(e,t+18),this.len>22){let c=w.get(e,t+22);if(c>0){let N=(c+1)%2;if(23+c+N===this.len)n.compressionName=new h(c,"latin1").get(e,t+23);else throw new i("Illegal pstring length")}else n.compressionName=void 0}}else n.compressionName="PCM";return n}};var u={len:8,get:(r,e)=>({chunkID:o.get(r,e),chunkSize:Number(BigInt(l.get(r,e+4)))})};var d=(0,E.default)("music-metadata:parser:aiff"),A=class extends C{constructor(){super(...arguments),this.isCompressed=null}parse(){return p(this,null,function*(){if((yield this.tokenizer.readToken(u)).chunkID!=="FORM")throw new i("Invalid Chunk-ID, expected 'FORM'");let t=yield this.tokenizer.readToken(o);switch(t){case"AIFF":this.metadata.setFormat("container",t),this.isCompressed=!1;break;case"AIFC":this.metadata.setFormat("container","AIFF-C"),this.isCompressed=!0;break;default:throw new i(`Unsupported AIFF type: ${t}`)}this.metadata.setFormat("lossless",!this.isCompressed);try{for(;!this.tokenizer.fileInfo.size||this.tokenizer.fileInfo.size-this.tokenizer.position>=u.len;){d(`Reading AIFF chunk at offset=${this.tokenizer.position}`);let s=yield this.tokenizer.readToken(u),a=2*Math.round(s.chunkSize/2),n=yield this.readData(s);yield this.tokenizer.ignore(a-n)}}catch(s){if(s instanceof T)d("End-of-stream");else throw s}})}readData(e){return p(this,null,function*(){switch(e.chunkID){case"COMM":{if(this.isCompressed===null)throw new i("Failed to parse AIFF.COMM chunk when compression type is unknown");let t=yield this.tokenizer.readToken(new k(e,this.isCompressed));return this.metadata.setFormat("bitsPerSample",t.sampleSize),this.metadata.setFormat("sampleRate",t.sampleRate),this.metadata.setFormat("numberOfChannels",t.numChannels),this.metadata.setFormat("numberOfSamples",t.numSampleFrames),this.metadata.setFormat("duration",t.numSampleFrames/t.sampleRate),(t.compressionName||t.compressionType)&&this.metadata.setFormat("codec",t.compressionName??S[t.compressionType]),e.chunkSize}case"ID3 ":{let t=yield this.tokenizer.readToken(new I(e.chunkSize)),s=f(t);return yield new g().parse(this.metadata,s,this.options),e.chunkSize}case"SSND":return this.metadata.format.duration&&this.metadata.setFormat("bitrate",8*e.chunkSize/this.metadata.format.duration),0;case"NAME":case"AUTH":case"(c) ":case"ANNO":return this.readTextChunk(e);default:return d(`Ignore chunk id=${e.chunkID}, size=${e.chunkSize}`),0}})}readTextChunk(e){return p(this,null,function*(){let s=(yield this.tokenizer.readToken(new h(e.chunkSize,"ascii"))).split("\0").map(a=>a.trim()).filter(a=>a?.length);return yield Promise.all(s.map(a=>this.metadata.addTag("AIFF",e.chunkID,a))),e.chunkSize})}};export{A as AIFFParser};
