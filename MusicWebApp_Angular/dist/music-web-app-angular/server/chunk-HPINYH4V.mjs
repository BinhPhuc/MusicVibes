import './polyfills.server.mjs';
import{a as b}from"./chunk-RVUKZ57B.mjs";import"./chunk-B6TGWD6U.mjs";import"./chunk-MNUGV5G3.mjs";import{a as i}from"./chunk-5UP6YO5R.mjs";import{c as T}from"./chunk-SOGTJI5B.mjs";import"./chunk-ZRBCXS6J.mjs";import"./chunk-X7WAPDBZ.mjs";import{C as S,D,c as y,d as u,f as k,i as I,j as l,s as f,v as z,w}from"./chunk-BMAIRAQG.mjs";import{g as F,i as h}from"./chunk-QYG7H2UI.mjs";var C=F(y(),1);var r={len:12,get:(c,e)=>({chunkID:i.get(c,e),chunkSize:f.get(c,e+4)})};var a=(0,C.default)("music-metadata:parser:aiff"),m=class extends S("DSDIFF"){},g=class extends D{parse(){return h(this,null,function*(){let e=yield this.tokenizer.readToken(r);if(e.chunkID!=="FRM8")throw new m("Unexpected chunk-ID");let t=(yield this.tokenizer.readToken(i)).trim();switch(t){case"DSD":return this.metadata.setFormat("container",`DSDIFF/${t}`),this.metadata.setFormat("lossless",!0),this.readFmt8Chunks(e.chunkSize-BigInt(i.len));default:throw new m(`Unsupported DSDIFF type: ${t}`)}})}readFmt8Chunks(e){return h(this,null,function*(){for(;e>=r.len;){let t=yield this.tokenizer.readToken(r);a(`Chunk id=${t.chunkID}`),yield this.readData(t),e-=BigInt(r.len)+t.chunkSize}})}readData(e){return h(this,null,function*(){a(`Reading data of chunk[ID=${e.chunkID}, size=${e.chunkSize}]`);let t=this.tokenizer.position;switch(e.chunkID.trim()){case"FVER":{let o=yield this.tokenizer.readToken(I);a(`DSDIFF version=${o}`);break}case"PROP":{if((yield this.tokenizer.readToken(i))!=="SND ")throw new m("Unexpected PROP-chunk ID");yield this.handleSoundPropertyChunks(e.chunkSize-BigInt(i.len));break}case"ID3":{let o=yield this.tokenizer.readToken(new z(Number(e.chunkSize))),n=T(o);yield new b().parse(this.metadata,n,this.options);break}case"DSD":this.metadata.format.numberOfChannels&&this.metadata.setFormat("numberOfSamples",Number(e.chunkSize*BigInt(8)/BigInt(this.metadata.format.numberOfChannels))),this.metadata.format.numberOfSamples&&this.metadata.format.sampleRate&&this.metadata.setFormat("duration",this.metadata.format.numberOfSamples/this.metadata.format.sampleRate);break;default:a(`Ignore chunk[ID=${e.chunkID}, size=${e.chunkSize}]`);break}let s=e.chunkSize-BigInt(this.tokenizer.position-t);s>0&&(a(`After Parsing chunk, remaining ${s} bytes`),yield this.tokenizer.ignore(Number(s)))})}handleSoundPropertyChunks(e){return h(this,null,function*(){for(a(`Parsing sound-property-chunks, remainingSize=${e}`);e>0;){let t=yield this.tokenizer.readToken(r);a(`Sound-property-chunk[ID=${t.chunkID}, size=${t.chunkSize}]`);let s=this.tokenizer.position;switch(t.chunkID.trim()){case"FS":{let n=yield this.tokenizer.readToken(l);this.metadata.setFormat("sampleRate",n);break}case"CHNL":{let n=yield this.tokenizer.readToken(k);this.metadata.setFormat("numberOfChannels",n),yield this.handleChannelChunks(t.chunkSize-BigInt(k.len));break}case"CMPR":{let n=(yield this.tokenizer.readToken(i)).trim(),d=yield this.tokenizer.readToken(u),p=yield this.tokenizer.readToken(new w(d,"ascii"));n==="DSD"&&(this.metadata.setFormat("lossless",!0),this.metadata.setFormat("bitsPerSample",1)),this.metadata.setFormat("codec",`${n} (${p})`);break}case"ABSS":{let n=yield this.tokenizer.readToken(k),d=yield this.tokenizer.readToken(u),p=yield this.tokenizer.readToken(u),$=yield this.tokenizer.readToken(l);a(`ABSS ${n}:${d}:${p}.${$}`);break}case"LSCO":{let n=yield this.tokenizer.readToken(k);a(`LSCO lsConfig=${n}`);break}default:a(`Unknown sound-property-chunk[ID=${t.chunkID}, size=${t.chunkSize}]`),yield this.tokenizer.ignore(Number(t.chunkSize))}let o=t.chunkSize-BigInt(this.tokenizer.position-s);o>0&&(a(`After Parsing sound-property-chunk ${t.chunkSize}, remaining ${o} bytes`),yield this.tokenizer.ignore(Number(o))),e-=BigInt(r.len)+t.chunkSize,a(`Parsing sound-property-chunks, remainingSize=${e}`)}if(this.metadata.format.lossless&&this.metadata.format.sampleRate&&this.metadata.format.numberOfChannels&&this.metadata.format.bitsPerSample){let t=this.metadata.format.sampleRate*this.metadata.format.numberOfChannels*this.metadata.format.bitsPerSample;this.metadata.setFormat("bitrate",t)}})}handleChannelChunks(e){return h(this,null,function*(){a(`Parsing channel-chunks, remainingSize=${e}`);let t=[];for(;e>=i.len;){let s=yield this.tokenizer.readToken(i);a(`Channel[ID=${s}]`),t.push(s),e-=BigInt(i.len)}return a(`Channels: ${t.join(", ")}`),t})}};export{m as DsdiffContentParseError,g as DsdiffParser};
