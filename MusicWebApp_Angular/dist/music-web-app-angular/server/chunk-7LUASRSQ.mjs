import './polyfills.server.mjs';
import{a as l}from"./chunk-MDYUOOUO.mjs";import{a as u}from"./chunk-RVUKZ57B.mjs";import"./chunk-B6TGWD6U.mjs";import"./chunk-MNUGV5G3.mjs";import{a as h}from"./chunk-5UP6YO5R.mjs";import"./chunk-SOGTJI5B.mjs";import"./chunk-ZRBCXS6J.mjs";import"./chunk-X7WAPDBZ.mjs";import{C as d,c as T,o as r,p as k,q as i}from"./chunk-BMAIRAQG.mjs";import{g as N,i as o}from"./chunk-QYG7H2UI.mjs";var z=N(T(),1);var s={len:12,get:(t,e)=>({id:h.get(t,e),size:k.get(t,e+4)})},g={len:16,get:(t,e)=>({fileSize:i.get(t,e),metadataPointer:i.get(t,e+8)})};var p={len:40,get:(t,e)=>({formatVersion:r.get(t,e),formatID:r.get(t,e+4),channelType:r.get(t,e+8),channelNum:r.get(t,e+12),samplingFrequency:r.get(t,e+16),bitsPerSample:r.get(t,e+20),sampleCount:i.get(t,e+24),blockSizePerChannel:r.get(t,e+32)})};var m=(0,z.default)("music-metadata:parser:DSF"),c=class extends d("DSD"){},I=class extends l{postId3v2Parse(){return o(this,null,function*(){let e=this.tokenizer.position,n=yield this.tokenizer.readToken(s);if(n.id!=="DSD ")throw new c("Invalid chunk signature");this.metadata.setFormat("container","DSF"),this.metadata.setFormat("lossless",!0);let a=yield this.tokenizer.readToken(g);if(a.metadataPointer===BigInt(0))m("No ID3v2 tag present");else return m(`expect ID3v2 at offset=${a.metadataPointer}`),yield this.parseChunks(a.fileSize-n.size),yield this.tokenizer.ignore(Number(a.metadataPointer)-this.tokenizer.position-e),new u().parse(this.metadata,this.tokenizer,this.options)})}parseChunks(e){return o(this,null,function*(){for(;e>=s.len;){let n=yield this.tokenizer.readToken(s);switch(m(`Parsing chunk name=${n.id} size=${n.size}`),n.id){case"fmt ":{let a=yield this.tokenizer.readToken(p);this.metadata.setFormat("numberOfChannels",a.channelNum),this.metadata.setFormat("sampleRate",a.samplingFrequency),this.metadata.setFormat("bitsPerSample",a.bitsPerSample),this.metadata.setFormat("numberOfSamples",a.sampleCount),this.metadata.setFormat("duration",Number(a.sampleCount)/a.samplingFrequency);let F=a.bitsPerSample*a.samplingFrequency*a.channelNum;this.metadata.setFormat("bitrate",F);return}default:this.tokenizer.ignore(Number(n.size)-s.len);break}e-=n.size}})}};export{c as DsdContentParseError,I as DsfParser};
