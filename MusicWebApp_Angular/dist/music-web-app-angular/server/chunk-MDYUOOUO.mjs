import './polyfills.server.mjs';
import{a as n}from"./chunk-RVUKZ57B.mjs";import{b as o}from"./chunk-B6TGWD6U.mjs";import{a as s}from"./chunk-SOGTJI5B.mjs";import{e as r}from"./chunk-ZRBCXS6J.mjs";import{D as a,c as f}from"./chunk-BMAIRAQG.mjs";import{g as h,i as t}from"./chunk-QYG7H2UI.mjs";var p=h(f(),1);var i=(0,p.default)("music-metadata:parser:ID3"),d=class extends a{constructor(){super(...arguments),this.id3parser=new n}static startsWithID3v2Header(e){return t(this,null,function*(){return(yield e.peekToken(r)).fileIdentifier==="ID3"})}parse(){return t(this,null,function*(){try{yield this.parseID3v2()}catch(e){if(e instanceof s)i("End-of-stream");else throw e}})}finalize(){}parseID3v2(){return t(this,null,function*(){yield this.tryReadId3v2Headers(),i("End of ID3v2 header, go to MPEG-parser: pos=%s",this.tokenizer.position),yield this.postId3v2Parse(),this.options.skipPostHeaders&&this.metadata.hasAny()?this.finalize():(yield new o(this.metadata,this.tokenizer,this.options).parse(),this.finalize())})}tryReadId3v2Headers(){return t(this,null,function*(){if((yield this.tokenizer.peekToken(r)).fileIdentifier==="ID3")return i("Found ID3v2 header, pos=%s",this.tokenizer.position),yield this.id3parser.parse(this.metadata,this.tokenizer,this.options),this.tryReadId3v2Headers()})}};export{d as a};
